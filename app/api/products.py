# app/api/products.py - Version compl√®te avec corrections promoPrice

from datetime import datetime
from typing import Optional, Dict, Any

from bson import ObjectId
from bson.errors import InvalidId
from fastapi import APIRouter, HTTPException, Depends, Query
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from slugify import slugify

from app.core.database import get_database
from app.core.security import get_current_admin
from app.core.utils import serialize_product
from app.models.schemas import ProductCreate, ProductUpdate

router = APIRouter()

# ============================================
# GET - R√âCUP√âRER LES PRODUITS
# ============================================

@router.get("")
async def get_products(
        category: Optional[str] = None,
        subcategory: Optional[str] = None,
        search: Optional[str] = None,
        featured: Optional[bool] = None,
        promotion: Optional[bool] = None,
        page: int = Query(1, ge=1),
        limit: int = Query(50, ge=1, le=2000)
):
    """
    R√©cup√®re la liste des produits avec filtres

    Param√®tres:
    - category: Filtre par cat√©gorie (ex: "parfum", "vetement")
    - subcategory: Filtre par sous-cat√©gorie (ex: "50ml", "M")
    - search: Recherche par nom ou description
    - featured: Produits en vedette (true/false)
    - promotion: Produits en promotion (true/false)
    - page: Num√©ro de page (d√©faut: 1)
    - limit: Nombre de r√©sultats par page (d√©faut: 50, max: 2000)
    """
    db = get_database()
    query = {"active": True}

    # ‚úÖ Ajouter les filtres seulement s'ils sont fournis
    if category:
        query["category"] = category
    if subcategory:
        query["subcategory"] = subcategory
    if search:
        query["$or"] = [
            {"name": {"$regex": search, "$options": "i"}},
            {"description": {"$regex": search, "$options": "i"}},
            {"shortDescription": {"$regex": search, "$options": "i"}}
        ]
    if featured is not None:
        query["featured"] = featured
    if promotion is not None:
        query["onPromotion"] = promotion

    skip = (page - 1) * limit

    print(f"üîç Query MongoDB: {query}")
    print(f"üìÑ Pagination: page={page}, limit={limit}, skip={skip}")

    try:
        cursor = db.products.find(query).sort("createdAt", -1).skip(skip).limit(limit)
        products = await cursor.to_list(length=limit)
        total = await db.products.count_documents(query)

        print(f"‚úÖ Trouv√© {len(products)} produits (total: {total})")

        # ‚úÖ S√©rialiser chaque produit
        serialized_products = [serialize_product(p) for p in products]

        # üîç Debug: afficher les 2 premiers
        for p in serialized_products[:2]:
            print(f"   üì¶ {p['name']}: prix={p['price']}F, promo={p.get('promoPrice')}, stock={p['stockTotal']}")

        # ‚úÖ Retourner un dict simple (FastAPI le s√©rialise automatiquement)
        return {
            "success": True,
            "data": serialized_products,
            "total": total,
            "page": page,
            "limit": limit,
            "pages": (total + limit - 1) // limit
        }

    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{product_id}")
async def get_product(product_id: str):
    """R√©cup√®re un produit par son ID"""
    db = get_database()

    try:
        # Valider l'ObjectId
        if not ObjectId.is_valid(product_id):
            raise HTTPException(status_code=400, detail="ID produit invalide")

        product = await db.products.find_one({"_id": ObjectId(product_id)})
    except InvalidId:
        raise HTTPException(status_code=400, detail="ID produit invalide")

    if not product:
        raise HTTPException(status_code=404, detail="Produit non trouv√©")

    # ‚úÖ S√©rialiser le produit
    serialized_product = serialize_product(product)

    print(f"‚úÖ Produit trouv√©: {serialized_product['name']}")
    print(f"   Prix: {serialized_product['price']}F | PromoPrice: {serialized_product.get('promoPrice')} | Stock: {serialized_product['stockTotal']}")

    return {
        "success": True,
        "data": serialized_product
    }


@router.get("/category/{category}")
async def get_products_by_category(
        category: str,
        page: int = Query(1, ge=1),
        limit: int = Query(50, ge=1, le=2000)
):
    """R√©cup√®re les produits d'une cat√©gorie"""
    db = get_database()

    query = {"active": True, "category": category}
    skip = (page - 1) * limit

    try:
        cursor = db.products.find(query).sort("createdAt", -1).skip(skip).limit(limit)
        products = await cursor.to_list(length=limit)
        total = await db.products.count_documents(query)

        # ‚úÖ S√©rialiser chaque produit
        serialized_products = [serialize_product(p) for p in products]

        return {
            "success": True,
            "data": serialized_products,
            "total": total,
            "page": page,
            "limit": limit
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# POST - CR√âER UN PRODUIT
# ============================================

@router.post("")
async def create_product(
        data: ProductCreate,
        admin=Depends(get_current_admin)
):
    """Cr√©e un nouveau produit (Admin uniquement)"""
    db = get_database()

    try:
        product_dict = data.dict()

        print(f"üîç DEBUG CREATE - Payload re√ßu: {product_dict}")

        product_dict["slug"] = slugify(data.name)
        product_dict["createdAt"] = datetime.now()
        product_dict["updatedAt"] = datetime.now()
        product_dict["active"] = True

        # ‚úÖ FIX: G√©rer promoPrice correctement
        # Si onPromotion = False, s'assurer que promoPrice = None
        if not product_dict.get("onPromotion", False):
            print("‚ö†Ô∏è Produit cr√©√© sans promo ‚Üí promoPrice = None")
            product_dict["promoPrice"] = None
        else:
            # Si onPromotion = True, v√©rifier qu'on a un prix promo
            if not product_dict.get("promoPrice"):
                print("‚ö†Ô∏è ATTENTION: Promo activ√©e mais pas de prix promo!")
                product_dict["promoPrice"] = None

        # Initialiser le stock vide si pas fourni
        if "stock" not in product_dict:
            product_dict["stock"] = {}

        print(f"üìù Cr√©ation produit: {product_dict['name']}")
        print(f"   promoPrice: {product_dict.get('promoPrice')}")
        print(f"   onPromotion: {product_dict.get('onPromotion')}")

        # ‚úÖ Insertion en DB
        result = await db.products.insert_one(product_dict)

        # üîç V√©rifier ce qui a √©t√© cr√©√©
        new_product = await db.products.find_one({"_id": result.inserted_id})
        print(f"‚úÖ Produit cr√©√© avec succ√®s")
        print(f"   promoPrice en DB: {new_product.get('promoPrice')}")

        serialized_product = serialize_product(new_product)

        return {
            "success": True,
            "data": serialized_product,
            "message": "Produit cr√©√© avec succ√®s"
        }

    except Exception as e:
        print(f"‚ùå Erreur cr√©ation: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# PUT - METTRE √Ä JOUR UN PRODUIT
# ============================================

@router.put("/{product_id}")
async def update_product(
        product_id: str,
        data: ProductUpdate,
        admin=Depends(get_current_admin)
):
    """Met √† jour un produit (Admin uniquement)"""
    db = get_database()

    try:
        if not ObjectId.is_valid(product_id):
            raise HTTPException(status_code=400, detail="ID produit invalide")

        existing_product = await db.products.find_one({"_id": ObjectId(product_id)})
        if not existing_product:
            raise HTTPException(status_code=404, detail="Produit non trouv√©")

        print(f"üîç DEBUG UPDATE - Payload re√ßu: {data.dict()}")

        # Construire update_data - garder SEULEMENT les valeurs non-None
        update_data = {}
        for key, value in data.dict().items():
            if value is not None:
                update_data[key] = value

        print(f"   Avant traitement promo: {update_data}")
        print(f"   promoPrice dans payload: {update_data.get('promoPrice')}")
        print(f"   onPromotion dans payload: {update_data.get('onPromotion')}")

        # ‚úÖ IMPORTANT: G√©rer la relation onPromotion ‚Üî promoPrice
        if "onPromotion" in update_data:
            if update_data["onPromotion"] is True:
                # Si on active la promo, s'assurer qu'il y a un prix promo
                if "promoPrice" not in update_data or update_data["promoPrice"] is None:
                    print("‚ö†Ô∏è Promo activ√©e mais pas de prix promo ‚Üí garder l'ancien")
                else:
                    print(f"‚úÖ Promo activ√©e avec promoPrice: {update_data['promoPrice']}")
            else:
                # Si on d√©sactive la promo, forcer promoPrice = None
                print("üî• Promo d√©sactiv√©e ‚Üí forcer promoPrice √† None")
                update_data["promoPrice"] = None
        elif "promoPrice" in update_data:
            # Si on modifie promoPrice SANS modifier onPromotion
            print(f"üìù PromoPrice modifi√© √† {update_data['promoPrice']} sans changer onPromotion")

        update_data["updatedAt"] = datetime.now()

        if "name" in update_data:
            update_data["slug"] = slugify(update_data["name"])

        print(f"‚úèÔ∏è  Mise √† jour: {list(update_data.keys())}")
        print(f"   promoPrice final: {update_data.get('promoPrice')}")
        print(f"   onPromotion final: {update_data.get('onPromotion')}")

        result = await db.products.update_one(
            {"_id": ObjectId(product_id)},
            {"$set": update_data}
        )

        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Produit non trouv√©")

        updated_product = await db.products.find_one({"_id": ObjectId(product_id)})
        serialized_product = serialize_product(updated_product)

        print(f"‚úÖ Produit mis √† jour")
        print(f"   promoPrice en DB: {updated_product.get('promoPrice')}")
        print(f"   onPromotion en DB: {updated_product.get('onPromotion')}")
        print(f"   promoPrice s√©rialis√©: {serialized_product.get('promoPrice')}")

        response_data = {
            "success": True,
            "data": serialized_product,
            "message": "Produit mis √† jour avec succ√®s"
        }

        # ‚úÖ Utiliser jsonable_encoder pour convertir datetime ‚Üí string
        return JSONResponse(
            content=jsonable_encoder(response_data),
            status_code=200
        )

    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# PUT - METTRE √Ä JOUR LE STOCK
# ============================================

@router.put("/{product_id}/stock")
async def update_product_stock(
        product_id: str,
        stock: Dict[str, Any],
        admin=Depends(get_current_admin)
):
    """
    Met √† jour le stock d'un produit (Admin uniquement)

    Exemples:

    Simple (Parfum/Bien-√™tre/Informatique):
    {
        "total": 50
    }

    Couleur + quantit√© (Accessoires):
    {
        "Noir": {"total": 25},
        "Argent": {"total": 18}
    }

    Couleur + taille + quantit√© (V√™tements):
    {
        "Noir": {"S": 10, "M": 15, "L": 8},
        "Blanc": {"S": 5, "M": 12, "L": 7}
    }
    """
    db = get_database()

    try:
        if not ObjectId.is_valid(product_id):
            raise HTTPException(status_code=400, detail="ID produit invalide")

        # V√©rifier que le produit existe
        product = await db.products.find_one({"_id": ObjectId(product_id)})
        if not product:
            raise HTTPException(status_code=404, detail="Produit non trouv√©")

        print(f"üì¶ Mise √† jour stock pour {product['name']}")
        print(f"   Nouveau stock: {stock}")

        # Mettre √† jour le stock
        result = await db.products.update_one(
            {"_id": ObjectId(product_id)},
            {"$set": {"stock": stock, "updatedAt": datetime.now()}}
        )

        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Produit non trouv√©")

        # R√©cup√©rer le produit mis √† jour
        updated_product = await db.products.find_one({"_id": ObjectId(product_id)})
        serialized_product = serialize_product(updated_product)

        print(f"‚úÖ Stock mis √† jour")
        print(f"   Stock total: {serialized_product['stockTotal']} | En stock: {serialized_product['inStock']}")

        return {
            "success": True,
            "data": serialized_product,
            "message": "Stock mis √† jour avec succ√®s"
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour stock: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# DELETE - SUPPRIMER UN PRODUIT
# ============================================

@router.delete("/{product_id}")
async def delete_product(
        product_id: str,
        admin=Depends(get_current_admin)
):
    """Supprime un produit (Admin uniquement) - Soft delete"""
    db = get_database()

    try:
        if not ObjectId.is_valid(product_id):
            raise HTTPException(status_code=400, detail="ID produit invalide")

        print(f"üóëÔ∏è  Suppression produit {product_id}")

        result = await db.products.update_one(
            {"_id": ObjectId(product_id)},
            {"$set": {"active": False, "updatedAt": datetime.now()}}
        )

        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Produit non trouv√©")

        print(f"‚úÖ Produit supprim√© (soft delete)")

        return {
            "success": True,
            "message": "Produit supprim√© avec succ√®s"
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur suppression: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# ENDPOINTS BONUS
# ============================================

@router.get("/featured/list")
async def get_featured_products(limit: int = Query(20, ge=1, le=500)):
    """R√©cup√®re les produits en vedette"""
    db = get_database()

    try:
        query = {"active": True, "featured": True}
        cursor = db.products.find(query).sort("createdAt", -1).limit(limit)
        products = await cursor.to_list(length=limit)

        serialized_products = [serialize_product(p) for p in products]

        return {
            "success": True,
            "data": serialized_products,
            "total": len(serialized_products)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/promotion/list")
async def get_promotion_products(limit: int = Query(20, ge=1, le=500)):
    """R√©cup√®re les produits en promotion"""
    db = get_database()

    try:
        query = {"active": True, "onPromotion": True}
        cursor = db.products.find(query).sort("createdAt", -1).limit(limit)
        products = await cursor.to_list(length=limit)

        serialized_products = [serialize_product(p) for p in products]

        return {
            "success": True,
            "data": serialized_products,
            "total": len(serialized_products)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/search")
async def search_products(
        query_text: str = Query(..., min_length=1),
        page: int = Query(1, ge=1),
        limit: int = Query(20, ge=1, le=500)
):
    """Recherche en texte complet"""
    db = get_database()

    try:
        skip = (page - 1) * limit

        search_query = {
            "active": True,
            "$or": [
                {"name": {"$regex": query_text, "$options": "i"}},
                {"description": {"$regex": query_text, "$options": "i"}},
                {"shortDescription": {"$regex": query_text, "$options": "i"}},
                {"category": {"$regex": query_text, "$options": "i"}}
            ]
        }

        cursor = db.products.find(search_query).sort("_id", -1).skip(skip).limit(limit)
        products = await cursor.to_list(length=limit)
        total = await db.products.count_documents(search_query)

        serialized_products = [serialize_product(p) for p in products]

        return {
            "success": True,
            "data": serialized_products,
            "total": total,
            "page": page,
            "limit": limit
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))